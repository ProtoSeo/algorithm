name: commit-with-another-repository

on:
  push:
    branches: [ "main", "test-workflow"]

env:
  ORGANIZATION: anti-fragile-study
  REPOSITORY: algorithm-study
  PROBLEM_LIST_FILE: ../algorithm-study/README.md
  EMAIL: proto_seo@naver.com
  USERNAME: protoseo
  CONTAINS_PROBLEM: false

jobs:
  auto-commit-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: List pushed files
        id: find-target-problem
        run: |
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          for file_name in $changed_files; do
            is_not_readme=$(echo $file_name | { grep "README.md" || true; })
            if [[ -z $is_not_readme ]];then
              echo "FILE_NAME=$(printf $file_name | sed 's/"//g')" >> $GITHUB_ENV
            fi 
          done
          echo ${{ env.FILE_NAME }}
      - name: clone target repository
        run: git clone "https://$GITHUB_ACTOR:${{ secrets.GH_PAT }}@github.com/${{ env.ORGANIZATION }}/${{ env.REPOSITORY }}"
      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: run python script
        run: python problem/parser.py $FILE_NAME $PROBLEM_LIST_FILE
        env:
          FILE_NAME: ${{ env.FILE_NAME }}
          PROBLEM_LIST_FILE: ${{ env.PROBLEM_LIST_FILE }}
      - name: set problem information to env
        id: set-problem-info
        run: |
          if [[ ! -e "problem/result.txt" ]];then
            echo "can't found problem in problem list"
            exit 0
          fi
          
          echo "CONTAINS_PROBLEM=true" >> $GITHUB_ENV 
          IFS=$'\n'
          while read -r line; do
            echo "$line" >> "$GITHUB_OUTPUT"
          done < problem/result.txt
      - name: create commit message
        id: create-commit-message
        if: ${{ env.CONTAINS_PROBLEM == 'true' }}
        run: |
          echo $ORGANIZATION
          type=${{ steps.set-problem-info.outputs.TYPE }}
          problem_number=${{ steps.set-problem-info.outputs.PROBLEM_NUMBER }}
          problem_name=${{ steps.set-problem-info.outputs.PROBLEM_NAME }}
          if [[ -n $(echo $type | { grep "PRGMS" || true; }) ]];then
            echo "COMMIT_MESSAGE=프로그래머스 $problem_name 문제 풀이" >> "$GITHUB_OUTPUT"
          else
            echo "COMMIT_MESSAGE=백준 $problem_number 번 $problem_name 문제 풀이" >> "$GITHUB_OUTPUT"
          fi
      - name: push problem to target branch
        if: ${{ env.CONTAINS_PROBLEM == 'true' }}
        run: |
          cd algorithm-study
          git config --global user.email "$EMAIL"
          git config --global user.name "$USERNAME" 
          
          week_number=${{ steps.set-problem-info.outputs.WEEK_NUMBER }}
          problem_name=${{ steps.set-problem-info.outputs.PROBLEM_NAME }}
          language=${{ steps.set-problem-info.outputs.SOLVED_LANGUAGE }}
          target_branch="$USERNAME/week-$week_number"
          has_target_branch=$(git branch -r | { grep "origin/$target_branch" || true; })
          directory="week-$week_number/$USERNAME/"
          problem="$problem_name.$language"

          ### Checkout target branch
          if [[ -z $has_target_branch ]];then
            echo "create target branch" 
            git checkout -b "$target_branch"
          else
            echo "already has target branch"
            git checkout -t "origin/$target_branch"
          fi

          mkdir -p $directory
          cat "../$FILE_NAME" >> $directory$problem
          git add .
          git commit -m "${{ steps.create-commit-message.outputs.COMMIT_MESSAGE }}"
#          git push origin "$target_branch"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EMAIL: ${{ env.EMAIL }}
          USERNAME: ${{ env.USERNAME }}
          FILE_NAME: ${{ env.FILE_NAME }}
      - name: install gh cli
        run : |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      - name: gh cli test
        run : |
          cd algorithm-study
          gh pr list --author "@me"
          echo "-------------"
          echo "${{ steps.zzuni.outputs.WEEK_NUMBER }}"
          title="${{ steps.zzuni.outputs.WEEK_NUMBER }}_protoseo"
          echo $title
          gh pr list | grep "$WEEK_NUMBER_protoseo"
        env:
          GH_TOKEN: ${{ github.token }}
